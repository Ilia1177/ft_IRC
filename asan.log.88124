=================================================================
==88124==ERROR: AddressSanitizer: container-overflow on address 0x60300000778e at pc 0x0001034da0f8 bp 0x7ff7bca4a4d0 sp 0x7ff7bca4a4c8
WRITE of size 2 at 0x60300000778e thread T0
    #0 0x0001034da0f7 in Server::start() Server.cpp:114
    #1 0x0001034b4cbc in main main.cpp:18
    #2 0x7ff8061d352f in start+0xbef (dyld:x86_64+0xfffffffffff1f52f)

0x60300000778e is located 14 bytes inside of 32-byte region [0x603000007780,0x6030000077a0)
allocated by thread T0 here:
    #0 0x000103a9f80d in _Znwm+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf580d)
    #1 0x0001034ecdb4 in pollfd* std::__1::__libcpp_allocate[abi:ne210101]<pollfd>(std::__1::__element_count, unsigned long) allocate.h:43
    #2 0x0001034ecd72 in std::__1::allocator<pollfd>::allocate[abi:ne210101](unsigned long) allocator.h:105
    #3 0x0001034eccec in std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<pollfd>>::pointer> std::__1::__allocate_at_least[abi:ne210101]<std::__1::allocator<pollfd>>(std::__1::allocator<pollfd>&, unsigned long) allocate_at_least.h:41
    #4 0x0001034ecb57 in std::__1::__split_buffer<pollfd, std::__1::allocator<pollfd>&>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<pollfd>&) __split_buffer:330
    #5 0x0001034ec48c in std::__1::__split_buffer<pollfd, std::__1::allocator<pollfd>&>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<pollfd>&) __split_buffer:326
    #6 0x0001034ebb63 in pollfd* std::__1::vector<pollfd, std::__1::allocator<pollfd>>::__emplace_back_slow_path<pollfd const&>(pollfd const&) vector.h:1128
    #7 0x0001034eb775 in void std::__1::vector<pollfd, std::__1::allocator<pollfd>>::emplace_back<pollfd const&>(pollfd const&) vector.h:1150
    #8 0x0001034e590c in std::__1::vector<pollfd, std::__1::allocator<pollfd>>::push_back[abi:ne210101](pollfd const&) vector.h:455
    #9 0x0001034d8773 in Server::_listen_to_socket(int, unsigned int) Server.cpp:343
    #10 0x0001034dc4a2 in Server::_handle_new_connection(int) Server.cpp:153
    #11 0x0001034d9e37 in Server::start() Server.cpp:96
    #12 0x0001034b4cbc in main main.cpp:18
    #13 0x7ff8061d352f in start+0xbef (dyld:x86_64+0xfffffffffff1f52f)

HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
SUMMARY: AddressSanitizer: container-overflow Server.cpp:114 in Server::start()
Shadow bytes around the buggy address:
  0x603000007500: fa fa fd fd fd fd fa fa fd fd fd fd fa fa fd fd
  0x603000007580: fd fd fa fa fd fd fd fd fa fa fd fd fd fd fa fa
  0x603000007600: fd fd fd fd fa fa fd fd fd fd fa fa fd fd fd fd
  0x603000007680: fa fa fd fd fd fd fa fa fd fd fd fd fa fa fd fd
  0x603000007700: fd fd fa fa fd fd fd fd fa fa fd fd fd fd fa fa
=>0x603000007780: 00[fc]fc fc fa fa fd fd fd fd fa fa fd fd fd fd
  0x603000007800: fa fa fd fd fd fd fa fa fd fd fd fd fa fa fd fd
  0x603000007880: fd fd fa fa fd fd fd fd fa fa fd fd fd fd fa fa
  0x603000007900: fd fd fd fd fa fa fd fd fd fd fa fa fd fd fd fd
  0x603000007980: fa fa fd fd fd fd fa fa fd fd fd fd fa fa fd fd
  0x603000007a00: fd fd fa fa fd fd fd fd fa fa fd fd fd fd fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==88124==ABORTING
